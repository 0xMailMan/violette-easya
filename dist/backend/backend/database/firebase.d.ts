import { CollectionReference, DocumentReference } from 'firebase-admin/firestore';
import { UserProfile, UserSettings, DIDRecord, UserAnalytics, DescriptionRecord, SimilarityCluster, RecommendationItem, BlockchainRecord } from '../../types/backend';
declare class FirebaseService {
    private db;
    private initialized;
    constructor();
    private initializeFirebase;
    users(): CollectionReference<UserProfile>;
    userProfile(userId: string): DocumentReference<UserProfile>;
    userSettings(userId: string): DocumentReference<UserSettings>;
    userDID(userId: string): DocumentReference<DIDRecord>;
    userAnalytics(userId: string): DocumentReference<UserAnalytics>;
    descriptions(): CollectionReference<DescriptionRecord>;
    description(descriptionId: string): DocumentReference<DescriptionRecord>;
    similarityClusters(): CollectionReference<SimilarityCluster>;
    similarityCluster(clusterId: string): DocumentReference<SimilarityCluster>;
    userRecommendations(userId: string): CollectionReference<RecommendationItem>;
    blockchainRecords(): CollectionReference<BlockchainRecord>;
    blockchainRecord(txHash: string): DocumentReference<BlockchainRecord>;
    createUser(userId: string, userData: Partial<UserProfile>): Promise<void>;
    getUserProfile(userId: string): Promise<UserProfile | null>;
    updateUserProfile(userId: string, updates: Partial<UserProfile>): Promise<void>;
    getUserSettings(userId: string): Promise<UserSettings | null>;
    updateUserSettings(userId: string, settings: UserSettings): Promise<void>;
    createDIDRecord(userId: string, didData: DIDRecord): Promise<void>;
    getDIDRecord(userId: string): Promise<DIDRecord | null>;
    updateDIDVerificationStatus(userId: string, status: 'pending' | 'verified' | 'failed'): Promise<void>;
    createDescription(description: DescriptionRecord): Promise<void>;
    getDescription(descriptionId: string): Promise<DescriptionRecord | null>;
    findSimilarDescriptions(embedding: number[], threshold?: number, limit?: number): Promise<DescriptionRecord[]>;
    private cosineSimilarity;
    createSimilarityCluster(cluster: SimilarityCluster): Promise<void>;
    getSimilarityCluster(clusterId: string): Promise<SimilarityCluster | null>;
    updateSimilarityCluster(clusterId: string, updates: Partial<SimilarityCluster>): Promise<void>;
    getClustersForUser(userId: string): Promise<SimilarityCluster[]>;
    addRecommendation(userId: string, recommendation: RecommendationItem): Promise<void>;
    getUserRecommendations(userId: string, limit?: number): Promise<RecommendationItem[]>;
    createBlockchainRecord(record: BlockchainRecord): Promise<void>;
    getBlockchainRecord(txHash: string): Promise<BlockchainRecord | null>;
    updateBlockchainVerificationStatus(txHash: string, status: 'pending' | 'confirmed' | 'failed'): Promise<void>;
    getBlockchainRecordsByDID(didReference: string): Promise<BlockchainRecord[]>;
    updateUserAnalytics(userId: string, analytics: Partial<UserAnalytics>): Promise<void>;
    getUserAnalytics(userId: string): Promise<UserAnalytics | null>;
    batchWrite(operations: (() => Promise<void>)[]): Promise<void>;
    runTransaction<T>(updateFunction: (transaction: any) => Promise<T>): Promise<T>;
    healthCheck(): Promise<boolean>;
}
export declare const firebaseService: FirebaseService;
export default firebaseService;
//# sourceMappingURL=firebase.d.ts.map